Write a blog on Difference between HTTP1.1 vs HTTP2
HTTP/1.1

HTTP/1.1 relies on a single connection per request/response, which can result in a slower loading time for web pages with multiple resources.
Header Compression:

Headers are sent with each request and response, contributing to increased overhead. Compression of headers is not standardized, leading to more significant data transmission.
Multiplexing:

Lack of support for multiplexing means that only one request can be processed at a time on a single connection, causing potential bottlenecks and increased latency.
Resource Prioritization:

HTTP/1.1 lacks a standardized mechanism for prioritizing resources, leading to suboptimal loading sequences and potential performance degradation.
Server Push:

Server push is not supported in HTTP/1.1, making it necessary for the client to request each resource individually, even if they are critical for rendering the page.
Round-Trip Time:

The protocol requires multiple round-trip times for loading resources, leading to slower performance and a less responsive user experience.
Header Redundancy:

Redundant headers in each request and response contribute to increased data transfer, affecting the overall performance of the web application.
Security:

While not inherently insecure, HTTP/1.1 lacks certain security features, making it susceptible to certain types of attacks like man-in-the-middle.
Stateless Nature:

HTTP/1.1 is stateless, meaning each request is independent of others, requiring additional mechanisms like cookies for maintaining state between requests.
Latency:

Due to the limitations mentioned above, HTTP/1.1 exhibits higher latency, especially when dealing with numerous small resources.
HTTP/2: 

Multiplexing:

HTTP/2 introduces multiplexing, allowing multiple requests and responses to be sent concurrently on a single connection, reducing latency and improving performance.
Header Compression:

HTTP/2 uses header compression, significantly reducing the overhead associated with sending headers with each request and response.
Binary Protocol:

Unlike the plain text nature of HTTP/1.1, HTTP/2 uses a binary protocol, making it more efficient for parsing and reducing errors.
Prioritization:

HTTP/2 supports resource prioritization, enabling the server to instruct the client on the order in which resources should be loaded, optimizing page rendering.
Server Push:

Server push is a key feature of HTTP/2, allowing the server to push resources to the client before they are explicitly requested, reducing the number of round-trip times.
Stream Dependency:

HTTP/2 allows dependencies between streams, ensuring that resources critical for rendering are processed first, enhancing overall performance.
Header Frame:

HTTP/2 introduces the HEADER frame, allowing header information to be sent independently of data frames, further reducing latency.
Backward Compatibility:

HTTP/2 is designed to be fully backward compatible with HTTP/1.1, ensuring a smooth transition for existing web applications.
Connection Handling:

With the introduction of multiplexing, HTTP/2 minimizes the need for multiple connections, reducing the overhead associated with connection setup.
Security:

While not a direct security enhancement, HTTP/2 is often used with HTTPS, providing a more secure communication channel compared to the plain text nature of HTTP/1.1.

Write a blog about objects and its internal representation in Javascript.


